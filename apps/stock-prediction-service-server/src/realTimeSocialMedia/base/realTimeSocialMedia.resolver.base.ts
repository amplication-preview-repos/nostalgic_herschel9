/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { RealTimeSocialMedia } from "./RealTimeSocialMedia";
import { RealTimeSocialMediaCountArgs } from "./RealTimeSocialMediaCountArgs";
import { RealTimeSocialMediaFindManyArgs } from "./RealTimeSocialMediaFindManyArgs";
import { RealTimeSocialMediaFindUniqueArgs } from "./RealTimeSocialMediaFindUniqueArgs";
import { CreateRealTimeSocialMediaArgs } from "./CreateRealTimeSocialMediaArgs";
import { UpdateRealTimeSocialMediaArgs } from "./UpdateRealTimeSocialMediaArgs";
import { DeleteRealTimeSocialMediaArgs } from "./DeleteRealTimeSocialMediaArgs";
import { RealTimeSocialMediaService } from "../realTimeSocialMedia.service";
@graphql.Resolver(() => RealTimeSocialMedia)
export class RealTimeSocialMediaResolverBase {
  constructor(protected readonly service: RealTimeSocialMediaService) {}

  async _realTimeSocialMediasMeta(
    @graphql.Args() args: RealTimeSocialMediaCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [RealTimeSocialMedia])
  async realTimeSocialMedias(
    @graphql.Args() args: RealTimeSocialMediaFindManyArgs
  ): Promise<RealTimeSocialMedia[]> {
    return this.service.realTimeSocialMedias(args);
  }

  @graphql.Query(() => RealTimeSocialMedia, { nullable: true })
  async realTimeSocialMedia(
    @graphql.Args() args: RealTimeSocialMediaFindUniqueArgs
  ): Promise<RealTimeSocialMedia | null> {
    const result = await this.service.realTimeSocialMedia(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => RealTimeSocialMedia)
  async createRealTimeSocialMedia(
    @graphql.Args() args: CreateRealTimeSocialMediaArgs
  ): Promise<RealTimeSocialMedia> {
    return await this.service.createRealTimeSocialMedia({
      ...args,
      data: args.data,
    });
  }

  @graphql.Mutation(() => RealTimeSocialMedia)
  async updateRealTimeSocialMedia(
    @graphql.Args() args: UpdateRealTimeSocialMediaArgs
  ): Promise<RealTimeSocialMedia | null> {
    try {
      return await this.service.updateRealTimeSocialMedia({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => RealTimeSocialMedia)
  async deleteRealTimeSocialMedia(
    @graphql.Args() args: DeleteRealTimeSocialMediaArgs
  ): Promise<RealTimeSocialMedia | null> {
    try {
      return await this.service.deleteRealTimeSocialMedia(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
