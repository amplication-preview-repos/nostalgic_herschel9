/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { RealTimeNews } from "./RealTimeNews";
import { RealTimeNewsCountArgs } from "./RealTimeNewsCountArgs";
import { RealTimeNewsFindManyArgs } from "./RealTimeNewsFindManyArgs";
import { RealTimeNewsFindUniqueArgs } from "./RealTimeNewsFindUniqueArgs";
import { CreateRealTimeNewsArgs } from "./CreateRealTimeNewsArgs";
import { UpdateRealTimeNewsArgs } from "./UpdateRealTimeNewsArgs";
import { DeleteRealTimeNewsArgs } from "./DeleteRealTimeNewsArgs";
import { RealTimeNewsService } from "../realTimeNews.service";
@graphql.Resolver(() => RealTimeNews)
export class RealTimeNewsResolverBase {
  constructor(protected readonly service: RealTimeNewsService) {}

  async _realTimeNewsItemsMeta(
    @graphql.Args() args: RealTimeNewsCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [RealTimeNews])
  async realTimeNewsItems(
    @graphql.Args() args: RealTimeNewsFindManyArgs
  ): Promise<RealTimeNews[]> {
    return this.service.realTimeNewsItems(args);
  }

  @graphql.Query(() => RealTimeNews, { nullable: true })
  async realTimeNews(
    @graphql.Args() args: RealTimeNewsFindUniqueArgs
  ): Promise<RealTimeNews | null> {
    const result = await this.service.realTimeNews(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => RealTimeNews)
  async createRealTimeNews(
    @graphql.Args() args: CreateRealTimeNewsArgs
  ): Promise<RealTimeNews> {
    return await this.service.createRealTimeNews({
      ...args,
      data: args.data,
    });
  }

  @graphql.Mutation(() => RealTimeNews)
  async updateRealTimeNews(
    @graphql.Args() args: UpdateRealTimeNewsArgs
  ): Promise<RealTimeNews | null> {
    try {
      return await this.service.updateRealTimeNews({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => RealTimeNews)
  async deleteRealTimeNews(
    @graphql.Args() args: DeleteRealTimeNewsArgs
  ): Promise<RealTimeNews | null> {
    try {
      return await this.service.deleteRealTimeNews(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
