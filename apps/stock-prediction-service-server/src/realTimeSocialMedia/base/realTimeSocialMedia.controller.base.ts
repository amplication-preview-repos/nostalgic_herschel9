/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { RealTimeSocialMediaService } from "../realTimeSocialMedia.service";
import { RealTimeSocialMediaCreateInput } from "./RealTimeSocialMediaCreateInput";
import { RealTimeSocialMedia } from "./RealTimeSocialMedia";
import { RealTimeSocialMediaFindManyArgs } from "./RealTimeSocialMediaFindManyArgs";
import { RealTimeSocialMediaWhereUniqueInput } from "./RealTimeSocialMediaWhereUniqueInput";
import { RealTimeSocialMediaUpdateInput } from "./RealTimeSocialMediaUpdateInput";

export class RealTimeSocialMediaControllerBase {
  constructor(protected readonly service: RealTimeSocialMediaService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: RealTimeSocialMedia })
  async createRealTimeSocialMedia(
    @common.Body() data: RealTimeSocialMediaCreateInput
  ): Promise<RealTimeSocialMedia> {
    return await this.service.createRealTimeSocialMedia({
      data: data,
      select: {
        content: true,
        createdAt: true,
        date: true,
        id: true,
        platform: true,
        sentiment: true,
        symbolField: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [RealTimeSocialMedia] })
  @ApiNestedQuery(RealTimeSocialMediaFindManyArgs)
  async realTimeSocialMedias(
    @common.Req() request: Request
  ): Promise<RealTimeSocialMedia[]> {
    const args = plainToClass(RealTimeSocialMediaFindManyArgs, request.query);
    return this.service.realTimeSocialMedias({
      ...args,
      select: {
        content: true,
        createdAt: true,
        date: true,
        id: true,
        platform: true,
        sentiment: true,
        symbolField: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: RealTimeSocialMedia })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async realTimeSocialMedia(
    @common.Param() params: RealTimeSocialMediaWhereUniqueInput
  ): Promise<RealTimeSocialMedia | null> {
    const result = await this.service.realTimeSocialMedia({
      where: params,
      select: {
        content: true,
        createdAt: true,
        date: true,
        id: true,
        platform: true,
        sentiment: true,
        symbolField: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: RealTimeSocialMedia })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateRealTimeSocialMedia(
    @common.Param() params: RealTimeSocialMediaWhereUniqueInput,
    @common.Body() data: RealTimeSocialMediaUpdateInput
  ): Promise<RealTimeSocialMedia | null> {
    try {
      return await this.service.updateRealTimeSocialMedia({
        where: params,
        data: data,
        select: {
          content: true,
          createdAt: true,
          date: true,
          id: true,
          platform: true,
          sentiment: true,
          symbolField: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: RealTimeSocialMedia })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteRealTimeSocialMedia(
    @common.Param() params: RealTimeSocialMediaWhereUniqueInput
  ): Promise<RealTimeSocialMedia | null> {
    try {
      return await this.service.deleteRealTimeSocialMedia({
        where: params,
        select: {
          content: true,
          createdAt: true,
          date: true,
          id: true,
          platform: true,
          sentiment: true,
          symbolField: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
