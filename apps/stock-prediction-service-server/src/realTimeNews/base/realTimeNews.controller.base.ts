/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { RealTimeNewsService } from "../realTimeNews.service";
import { RealTimeNewsCreateInput } from "./RealTimeNewsCreateInput";
import { RealTimeNews } from "./RealTimeNews";
import { RealTimeNewsFindManyArgs } from "./RealTimeNewsFindManyArgs";
import { RealTimeNewsWhereUniqueInput } from "./RealTimeNewsWhereUniqueInput";
import { RealTimeNewsUpdateInput } from "./RealTimeNewsUpdateInput";

export class RealTimeNewsControllerBase {
  constructor(protected readonly service: RealTimeNewsService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: RealTimeNews })
  async createRealTimeNews(
    @common.Body() data: RealTimeNewsCreateInput
  ): Promise<RealTimeNews> {
    return await this.service.createRealTimeNews({
      data: data,
      select: {
        content: true,
        createdAt: true,
        date: true,
        id: true,
        sentiment: true,
        source: true,
        symbolField: true,
        title: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [RealTimeNews] })
  @ApiNestedQuery(RealTimeNewsFindManyArgs)
  async realTimeNewsItems(
    @common.Req() request: Request
  ): Promise<RealTimeNews[]> {
    const args = plainToClass(RealTimeNewsFindManyArgs, request.query);
    return this.service.realTimeNewsItems({
      ...args,
      select: {
        content: true,
        createdAt: true,
        date: true,
        id: true,
        sentiment: true,
        source: true,
        symbolField: true,
        title: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: RealTimeNews })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async realTimeNews(
    @common.Param() params: RealTimeNewsWhereUniqueInput
  ): Promise<RealTimeNews | null> {
    const result = await this.service.realTimeNews({
      where: params,
      select: {
        content: true,
        createdAt: true,
        date: true,
        id: true,
        sentiment: true,
        source: true,
        symbolField: true,
        title: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: RealTimeNews })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateRealTimeNews(
    @common.Param() params: RealTimeNewsWhereUniqueInput,
    @common.Body() data: RealTimeNewsUpdateInput
  ): Promise<RealTimeNews | null> {
    try {
      return await this.service.updateRealTimeNews({
        where: params,
        data: data,
        select: {
          content: true,
          createdAt: true,
          date: true,
          id: true,
          sentiment: true,
          source: true,
          symbolField: true,
          title: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: RealTimeNews })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteRealTimeNews(
    @common.Param() params: RealTimeNewsWhereUniqueInput
  ): Promise<RealTimeNews | null> {
    try {
      return await this.service.deleteRealTimeNews({
        where: params,
        select: {
          content: true,
          createdAt: true,
          date: true,
          id: true,
          sentiment: true,
          source: true,
          symbolField: true,
          title: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
