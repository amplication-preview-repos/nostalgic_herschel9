/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import { Prisma, RealTimeNews as PrismaRealTimeNews } from "@prisma/client";

export class RealTimeNewsServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.RealTimeNewsCountArgs, "select">
  ): Promise<number> {
    return this.prisma.realTimeNews.count(args);
  }

  async realTimeNewsItems(
    args: Prisma.RealTimeNewsFindManyArgs
  ): Promise<PrismaRealTimeNews[]> {
    return this.prisma.realTimeNews.findMany(args);
  }
  async realTimeNews(
    args: Prisma.RealTimeNewsFindUniqueArgs
  ): Promise<PrismaRealTimeNews | null> {
    return this.prisma.realTimeNews.findUnique(args);
  }
  async createRealTimeNews(
    args: Prisma.RealTimeNewsCreateArgs
  ): Promise<PrismaRealTimeNews> {
    return this.prisma.realTimeNews.create(args);
  }
  async updateRealTimeNews(
    args: Prisma.RealTimeNewsUpdateArgs
  ): Promise<PrismaRealTimeNews> {
    return this.prisma.realTimeNews.update(args);
  }
  async deleteRealTimeNews(
    args: Prisma.RealTimeNewsDeleteArgs
  ): Promise<PrismaRealTimeNews> {
    return this.prisma.realTimeNews.delete(args);
  }
}
