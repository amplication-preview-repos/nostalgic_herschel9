/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { HistoricalStockDataService } from "../historicalStockData.service";
import { HistoricalStockDataCreateInput } from "./HistoricalStockDataCreateInput";
import { HistoricalStockData } from "./HistoricalStockData";
import { HistoricalStockDataFindManyArgs } from "./HistoricalStockDataFindManyArgs";
import { HistoricalStockDataWhereUniqueInput } from "./HistoricalStockDataWhereUniqueInput";
import { HistoricalStockDataUpdateInput } from "./HistoricalStockDataUpdateInput";

export class HistoricalStockDataControllerBase {
  constructor(protected readonly service: HistoricalStockDataService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: HistoricalStockData })
  async createHistoricalStockData(
    @common.Body() data: HistoricalStockDataCreateInput
  ): Promise<HistoricalStockData> {
    return await this.service.createHistoricalStockData({
      data: data,
      select: {
        close: true,
        createdAt: true,
        date: true,
        high: true,
        id: true,
        low: true,
        open: true,
        symbolField: true,
        updatedAt: true,
        volume: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [HistoricalStockData] })
  @ApiNestedQuery(HistoricalStockDataFindManyArgs)
  async historicalStockDataItems(
    @common.Req() request: Request
  ): Promise<HistoricalStockData[]> {
    const args = plainToClass(HistoricalStockDataFindManyArgs, request.query);
    return this.service.historicalStockDataItems({
      ...args,
      select: {
        close: true,
        createdAt: true,
        date: true,
        high: true,
        id: true,
        low: true,
        open: true,
        symbolField: true,
        updatedAt: true,
        volume: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: HistoricalStockData })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async historicalStockData(
    @common.Param() params: HistoricalStockDataWhereUniqueInput
  ): Promise<HistoricalStockData | null> {
    const result = await this.service.historicalStockData({
      where: params,
      select: {
        close: true,
        createdAt: true,
        date: true,
        high: true,
        id: true,
        low: true,
        open: true,
        symbolField: true,
        updatedAt: true,
        volume: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: HistoricalStockData })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateHistoricalStockData(
    @common.Param() params: HistoricalStockDataWhereUniqueInput,
    @common.Body() data: HistoricalStockDataUpdateInput
  ): Promise<HistoricalStockData | null> {
    try {
      return await this.service.updateHistoricalStockData({
        where: params,
        data: data,
        select: {
          close: true,
          createdAt: true,
          date: true,
          high: true,
          id: true,
          low: true,
          open: true,
          symbolField: true,
          updatedAt: true,
          volume: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: HistoricalStockData })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteHistoricalStockData(
    @common.Param() params: HistoricalStockDataWhereUniqueInput
  ): Promise<HistoricalStockData | null> {
    try {
      return await this.service.deleteHistoricalStockData({
        where: params,
        select: {
          close: true,
          createdAt: true,
          date: true,
          high: true,
          id: true,
          low: true,
          open: true,
          symbolField: true,
          updatedAt: true,
          volume: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
