/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { HistoricalStockData } from "./HistoricalStockData";
import { HistoricalStockDataCountArgs } from "./HistoricalStockDataCountArgs";
import { HistoricalStockDataFindManyArgs } from "./HistoricalStockDataFindManyArgs";
import { HistoricalStockDataFindUniqueArgs } from "./HistoricalStockDataFindUniqueArgs";
import { CreateHistoricalStockDataArgs } from "./CreateHistoricalStockDataArgs";
import { UpdateHistoricalStockDataArgs } from "./UpdateHistoricalStockDataArgs";
import { DeleteHistoricalStockDataArgs } from "./DeleteHistoricalStockDataArgs";
import { HistoricalStockDataService } from "../historicalStockData.service";
@graphql.Resolver(() => HistoricalStockData)
export class HistoricalStockDataResolverBase {
  constructor(protected readonly service: HistoricalStockDataService) {}

  async _historicalStockDataItemsMeta(
    @graphql.Args() args: HistoricalStockDataCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [HistoricalStockData])
  async historicalStockDataItems(
    @graphql.Args() args: HistoricalStockDataFindManyArgs
  ): Promise<HistoricalStockData[]> {
    return this.service.historicalStockDataItems(args);
  }

  @graphql.Query(() => HistoricalStockData, { nullable: true })
  async historicalStockData(
    @graphql.Args() args: HistoricalStockDataFindUniqueArgs
  ): Promise<HistoricalStockData | null> {
    const result = await this.service.historicalStockData(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => HistoricalStockData)
  async createHistoricalStockData(
    @graphql.Args() args: CreateHistoricalStockDataArgs
  ): Promise<HistoricalStockData> {
    return await this.service.createHistoricalStockData({
      ...args,
      data: args.data,
    });
  }

  @graphql.Mutation(() => HistoricalStockData)
  async updateHistoricalStockData(
    @graphql.Args() args: UpdateHistoricalStockDataArgs
  ): Promise<HistoricalStockData | null> {
    try {
      return await this.service.updateHistoricalStockData({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => HistoricalStockData)
  async deleteHistoricalStockData(
    @graphql.Args() args: DeleteHistoricalStockDataArgs
  ): Promise<HistoricalStockData | null> {
    try {
      return await this.service.deleteHistoricalStockData(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
